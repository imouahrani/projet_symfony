<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll()
    {
        //Méthode 1 : en passant par le gestionnaire d'entités
        $queryBuilder = $this->_em->createQueryBuilder()->select('a')->from($this->_entityName, 'a');
        //Dans un repository, $this->_entityName est l'espace de noms de
        // l'entity gérée
        // Ici, il vaut doc OC\PlatformBundle\Entity\Advert.

        //Méthode 2 : en passant par le raccourci (je recommande)
        $queryBuilder = $this->createQueryBuilder('a');

        //On n'ajoute pas de critère ou tri particulier ; la construction
        //de notre requête est finie

        //On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();

        //On récupère les résultats à partir de la Query
        $results = $query->getResult();

        //on retourne ces résultats
        return $results;
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb->andWhere('a.date BETWEEN :start AND :end')->setParameter('start', new \DateTime(date('Y') . '-01-01'))
            //Date entre le 1er janvier de cette année
            ->setParameter('end', new \DateTime(date('Y') . '-12-31'));
        //Et le 31 décembre de cette année
    }

    public function getAdvertWithApplications()
    {
        $qb = $this->createQueryBuilder('a')->leftJoin('a.applications', 'app')->addSelect('app');
        return $qb->getQuery()->getResult();
    }

    public function getAdvertWithCategories(array $categoryNames)
    {
        //On fait une jointure avec l'entité Category avec pour alias "c"
        $qb = $this->createQueryBuilder('a')->innerJoin('a.categories', 'c')->addSelect('c');

        //Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));

        //La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine.

        //Enfin on retourne le résultat
        return $qb->getQuery()->getResult();

    }

    public function getAdverts($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
            //Jointure sur l'attribut image
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            //Jointure sur l'attribut categories
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->orderBy('a.date', 'DESC')
            ->getQuery();
        //return $query->getResult();
        //On définit l'annonce à partir de laquelle commencer la liste
        $query->setFirstResult(($page - 1) * $nbPerPage)
            //Ainsi que le nombre d'annonce à afficher sur une page.
            ->setMaxResults($nbPerPage);
        //Enfin, on retrouve l'objet Paginator correspondant à la requête
        //construite
        //N'oubliez pas le use correspondant en début de fichier
        return new Paginator($query, true);

    }


}
